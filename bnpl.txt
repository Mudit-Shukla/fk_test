
for column in df.columns:
    plt.figure(figsize=(10, 5))
    
    # Original data points
    x = np.arange(len(df))
    y_original = df[column].values
    y_sqrt = sqrt_df[column].values
    
    # Interpolation for smoother curves
    xnew = np.linspace(x.min(), x.max(), 300)  # 300 points for a smooth curve
    spline_original = make_interp_spline(x, y_original, k=3)
    spline_sqrt = make_interp_spline(x, y_sqrt, k=3)
    
    y_original_smooth = spline_original(xnew)
    y_sqrt_smooth = spline_sqrt(xnew)
    
    # Plot Original Values as a Smooth Curve
    plt.plot(xnew, y_original_smooth, label=f'Original {column}')
    
    # Plot Square Root Transformed Values as a Smooth Curve
    plt.plot(xnew, y_sqrt_smooth, label=f'Square Root {column}')
    
    # Adding titles and labels
    plt.title(f'Original vs Square Root Transformed Values for {column}')
    plt.xlabel('Index')
    plt.ylabel('Value')
    plt.legend()
    
    # Show the plot
    plt.show()




scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)
scaled_df = pd.DataFrame(scaled_data, columns=df.columns)
