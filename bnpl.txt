df['base_score2']=(1-df3['WOE1'])*100*0.05 + (1-df3['WOE2'])*100*0.05 + df['payment_modes_lt_cod_count_ratio']*10 + df3['riskypincode']*0.25+demo['riskypayment']*0.4+df3['riskydevice']*0.10 + df['log_bnpl']*5


df['log_bnpl']=np.where(
    df['bnpl_total_amount_overdue_12m'] == 0,
    1,
    np.log(df['bnpl_total_amount_overdue_lt'])
45- 73551 ,63030
41-83123 ,67898
50 -46487,46610


df[df['base_score2']>45].shape[0]
df[(df['base_score2']>45)&(df['bnpl_total_amount_overdue_12m']>500)].shape[0]






unique_base_scores = sorted(df['base_score2'].unique())

# Lambda function to calculate the metric
calculate_fn = lambda X: (
    X,
    df[df['base_score2'] > X].shape[0] - df[(df['base_score2'] > X) & (df['bnpl_total_amount_overdue_12m'] > 500)].shape[0]
)

# Use a list comprehension to calculate the result for each unique base_score
results = [calculate_fn(X) for X in unique_base_scores]

# Display the results
for result in results:
    print(f"Threshold: {result[0]}, Value: {result[1]}")
